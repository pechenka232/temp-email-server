import asyncio
import json
import datetime
from fastapi import FastAPI
from aiosmtpd.controller import Controller
from starlette.websockets import WebSocket
import uvicorn

app = FastAPI()

# –•—Ä–∞–Ω–∏–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ email-–∞–¥—Ä–µ—Å–∞
emails = {}

class MailHandler:
    async def handle_RCPT(self, server, session, envelope, address, rcpt_options):
        if "@" in address:
            emails[address] = []
            return "250 OK"
        return "550 No such user"

    async def handle_DATA(self, server, session, envelope):
        message = envelope.content.decode('utf-8')
        for rcpt in envelope.rcpt_tos:
            if rcpt in emails:
                emails[rcpt].append({"time": datetime.datetime.now(), "message": message})
        return "250 Message accepted"

# –ó–∞–ø—É—Å–∫–∞–µ–º SMTP-—Å–µ—Ä–≤–µ—Ä
def run_smtp_server():
    controller = Controller(MailHandler(), hostname="127.0.0.1", port=1025)
    controller.start()
    print("üì° SMTP-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ 127.0.0.1:1025")

# –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ø–∏—Å–µ–º (—É–¥–∞–ª—è–µ–º –ø–∏—Å—å–º–∞ —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤)
async def cleanup_old_emails():
    while True:
        now = datetime.datetime.now()
        for email in list(emails.keys()):
            emails[email] = [msg for msg in emails[email] if (now - msg["time"]).seconds < 86400]
            if not emails[email]:
                del emails[email]
        await asyncio.sleep(3600)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑ –≤ —á–∞—Å

# WebSocket API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
@app.websocket("/ws/{email}")
async def websocket_endpoint(websocket: WebSocket, email: str):
    await websocket.accept()
    while True:
        if email in emails and emails[email]:
            await websocket.send_text(json.dumps(emails[email]))
            emails[email] = []  # –û—á–∏—â–∞–µ–º –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        await asyncio.sleep(5)

# –ì–ª–∞–≤–Ω—ã–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å
async def main():
    loop = asyncio.get_event_loop()
    smtp_task = loop.run_in_executor(None, run_smtp_server)
    cleanup_task = asyncio.create_task(cleanup_old_emails())

    config = uvicorn.Config(app, host="0.0.0.0", port=8000, log_level="info")
    api_task = uvicorn.Server(config).serve()

    await asyncio.gather(smtp_task, cleanup_task, api_task)

if __name__ == "__main__":
    asyncio.run(main())
